{"version":3,"sources":["images/alisa.png","images/anna.png","images/bryan.png","images/dragunov.jpg","images/heihachi.jpg","images/jin.jpg","images/kazuya.jpeg","images/king.png","images/lili.jpeg","images/miguel.jpg","images/paul.png","images/raven.jpg","images/hwoarang.jpg","images/yoshimitsu.png","images/lee.jpg","components/Card.tsx","components/GameGrid.tsx","App.tsx","index.tsx"],"names":["module","exports","Card","cardNum","click","imageInfo","jin","kazuya","heihachi","king","alisa","anna","paul","dragunov","lili","bryan","raven","miguel","hwoarang","yoshimitsu","lee","getImageInfo","className","onClick","src","alt","GameGrid","props","order","map","App","useState","score","setScore","topScore","setTopScore","setOrder","Array","fill","clicked","setClicked","tempValue","randomIndex","newOrder","currentIndex","length","Math","floor","random","shuffleOrder","newClickedArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5dfbf8ec.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/alisa.e3243f7d.png\";","module.exports = __webpack_public_path__ + \"static/media/anna.8ae2a7c4.png\";","module.exports = __webpack_public_path__ + \"static/media/bryan.71fe0d4b.png\";","module.exports = __webpack_public_path__ + \"static/media/dragunov.721e9eb7.jpg\";","module.exports = __webpack_public_path__ + \"static/media/heihachi.44e7663f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/jin.a7370a07.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kazuya.c447f5a4.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/king.cd319a8b.png\";","module.exports = __webpack_public_path__ + \"static/media/lili.ccb26fcc.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/miguel.9f58ea75.jpg\";","module.exports = __webpack_public_path__ + \"static/media/paul.1f576e09.png\";","module.exports = __webpack_public_path__ + \"static/media/raven.b52372e2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/hwoarang.ab1f882a.jpg\";","module.exports = __webpack_public_path__ + \"static/media/yoshimitsu.a7ba3287.png\";","module.exports = __webpack_public_path__ + \"static/media/lee.423bcfe3.jpg\";","import React from 'react';\nimport './Card.css';\n\nimport alisa from '../images/alisa.png';\nimport anna from '../images/anna.png';\nimport bryan from '../images/bryan.png';\nimport dragunov from '../images/dragunov.jpg';\nimport heihachi from '../images/heihachi.jpg';\nimport jin from '../images/jin.jpg';\nimport kazuya from '../images/kazuya.jpeg';\nimport king from '../images/king.png';\nimport lili from '../images/lili.jpeg';\nimport miguel from '../images/miguel.jpg';\nimport paul from '../images/paul.png';\nimport raven from '../images/raven.jpg';\nimport hwoarang from '../images/hwoarang.jpg';\nimport yoshimitsu from '../images/yoshimitsu.png';\nimport lee from '../images/lee.jpg';\n\nconst getImageInfo = (cardNum: number): [string, string] => {\n    switch(cardNum) {\n        case 0:\n            return [jin, 'Jin'];\n            break;\n        case 1:\n            return [kazuya, 'Kazuya'];\n            break;\n        case 2:\n            return [heihachi, 'Heihachi'];\n            break;\n        case 3:\n            return [king, 'King'];\n            break;\n        case 4:\n            return [alisa, 'Alisa'];\n            break;\n        case 5:\n            return [anna, 'Anna'];\n            break;\n        case 6:\n            return [paul, 'Paul'];\n            break;\n        case 7:\n            return [dragunov, 'Dragunov'];\n            break;\n        case 8:\n            return [lili, 'Lili'];\n            break;\n        case 9:\n            return [bryan, 'Bryan'];\n            break;\n        case 10:\n            return [raven, 'Raven'];\n            break;\n        case 11:\n            return [miguel, 'Miguel'];\n        case 12:\n            return [hwoarang, 'Hwoarang'];\n        case 13:\n            return [yoshimitsu, 'Yoshimitsu'];\n        case 14:\n        default:\n            return [lee, 'Lee'];\n            \n    }\n}\n\ninterface CardProps {\n    cardNum: number;\n    click: (cardNum: number) => void;\n}\n\nconst Card: React.FC<CardProps> = ({ cardNum, click }) => {\n\n    const imageInfo: [string, string] = getImageInfo(cardNum);\n\n    return(\n        <div className='card' onClick={() => {click(cardNum)}}>\n            <img src={imageInfo[0]} alt={imageInfo[1]}/>\n            <h2> {imageInfo[1]} </h2>\n        </div>\n    )\n}\n\nexport default Card","import React from 'react';\nimport './GameGrid.css';\nimport Card from './Card';\n\ninterface GameGridProps {\n    order: number[];\n    click: (cardNum: number) => void;\n}\n\nconst GameGrid: React.FC<GameGridProps> = (props) => {\n\n    const { order, click } = props;\n\n    return (\n        <div className='game-grid'>\n            {order.map((cardNum) => {\n                return (\n                    <Card \n                        cardNum={cardNum}\n                        click={click}\n                    />\n                )\n            })}\n        </div>\n    )\n\n}\n\nexport default GameGrid","import React, { useState } from 'react';\nimport './App.css';\nimport GameGrid from './components/GameGrid'\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [order, setOrder] = useState([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\n  const [clicked, setClicked] = useState(Array(15).fill(false));\n\n  const shuffleOrder = () => {\n    //use Fisher-Yates algorithm\n    const newOrder = [...order];\n    let currentIndex = newOrder.length, tempValue: number, randomIndex: number;\n\n    while (currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      tempValue = newOrder[currentIndex];\n      newOrder[currentIndex] = newOrder[randomIndex];\n      newOrder[randomIndex] = tempValue;\n    }\n\n    setOrder(newOrder);\n  }\n\n  const handleCardClick = (cardNum: number) => {\n    shuffleOrder()\n\n    const newClickedArray = [...clicked];\n\n    if (clicked[cardNum]) { //if card already clicked\n      if (score > topScore) {\n        setTopScore(score);\n      }\n      setScore(0);\n      setClicked(Array(15).fill(false));\n    }\n    else { //if card not previously clicked\n      if (score + 1 > topScore) {\n        setTopScore(score + 1);\n      }\n      newClickedArray[cardNum] = true;\n      setScore(score + 1);\n      setClicked(newClickedArray);\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>TEKKEN CHARACTER MEMORY GAME</h1>\n        <p>Get points by clicking on an image, but don't click on any more than once!</p>\n        <span>Score: {score}</span>\n        <span>Top Score: {topScore}</span>\n      </header>\n\n      <GameGrid\n        order={order}\n        click={handleCardClick}\n         />\n\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}